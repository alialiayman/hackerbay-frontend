{"version":3,"sources":["helpers/core.js","components/enemy.svg","components/player.svg","components/Square.jsx","components/Board.jsx","App.js","index.js"],"names":["random","maxNum","Math","round","module","exports","createBoard","rows","columns","playerLocation","row","column","occupiedLocations","Map","playerSquare","boardSquares","size","newValue","has","set","elements","i","j","push","hasEnemy","totalMoves","Square","board","console","log","length","state","find","e","className","src","enemy","alt","player","Board","useState","model","setModel","moveHandler","direction","a","alert","divs","document","onkeydown","keyCode","Fragment","onClick","App","prompt","ReactDOM","render","StrictMode","getElementById"],"mappings":"8EAAA,IAuCMA,EAAS,SAACC,GACZ,OAAOC,KAAKC,MAAMD,KAAKF,SAAWC,IAGtCG,EAAOC,QAAU,CAAEC,YA3CC,SAACC,EAAMC,GAWvB,IATA,IAEMC,EAAiB,CAAEC,IAFPR,KAAKC,MAAMI,EAAO,GAEKI,OADpBT,KAAKC,MAAMK,EAAU,IAGtCI,EAAoB,IAAIC,IACtBC,EAAeL,EAAeC,IAAMF,EAAUC,EAAeE,OAC7DI,EAAeR,EAAOC,EAGrBI,EAAkBI,KAAOT,GAAM,CAClC,IAAMU,EAAWjB,EAAOe,GACnBH,EAAkBM,IAAID,IAAaA,IAAaH,GACjDF,EAAkBO,IAAIF,GAK9B,IADA,IAAMG,EAAW,GACRC,EAAI,EAAGA,EAAId,EAAMc,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAASc,IACrBV,EAAkBM,IAAIG,EAAIb,EAAUc,GACpCF,EAASG,KAAK,CAAEb,IAAKW,EAAGV,OAAQW,EAAGE,UAAU,IAE7CJ,EAASG,KAAK,CAAEb,IAAKW,EAAGV,OAAQW,EAAGE,UAAU,IAKzD,MAAO,CACHJ,WACAb,OACAC,UACAC,iBACAgB,WAAY,M,kBClCpBrB,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,2NCuC5BqB,EAlCA,SAAC,GAA4B,IAA1BhB,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,OAAQgB,EAAY,EAAZA,MAG3B,GADAC,QAAQC,IAAIF,IACPA,GAAmC,IAA1BA,EAAMP,SAASU,OAAc,OAAO,KAClD,IACIC,EAAQ,EASZ,OAViBJ,EAAMP,SAASY,MAAK,SAAAC,GAAC,OAAIA,EAAEvB,MAAQA,GAAOuB,EAAEtB,SAAWA,KAAQa,WAG5EO,EAAQ,GAGRJ,EAAMlB,eAAeC,MAAQA,GAAOiB,EAAMlB,eAAeE,SAAWA,IACpEoB,EAAQ,GAGE,IAAVA,EACO,yBAAKG,UAAU,cAGL,IAAVH,EACA,yBAAKG,UAAU,aAClB,yBAAKA,UAAU,UACX,yBAAKC,IAAKC,IAAOC,IAAI,YAItB,yBAAKH,UAAU,aAClB,yBAAKA,UAAU,UACX,yBAAKC,IAAKG,IAAQD,IAAI,c,OCsCvBE,G,MAjED,SAAC,GA4BX,IA5BkC,IAArBhC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAAc,EAEPgC,mBAASlC,sBAAYC,EAAMC,IAFpB,mBAE1BiC,EAF0B,KAEnBC,EAFmB,KAI3BC,EAAc,SAACC,GACC,IAAdA,EACIH,EAAMhC,eAAeC,IAAM,GAAK+B,EAAMhC,eAAeC,MACpC,IAAdkC,EACHH,EAAMhC,eAAeC,IAAM+B,EAAMlC,KAAO,GAAKkC,EAAMhC,eAAeC,MACjD,IAAdkC,EACHH,EAAMhC,eAAeE,OAAS,GAAK8B,EAAMhC,eAAeE,SACvC,IAAdiC,GACHH,EAAMhC,eAAeE,OAAS8B,EAAMjC,QAAU,GAAKiC,EAAMhC,eAAeE,SAGhF,IAAMyB,EAAQK,EAAMrB,SAASY,MAAK,SAAAa,GAAC,OAAIA,EAAEnC,MAAQ+B,EAAMhC,eAAeC,KAAOmC,EAAElC,SAAW8B,EAAMhC,eAAeE,UAC3GyB,IACAA,EAAMZ,UAAW,GAErBiB,EAAMhB,aACNiB,EAAS,eAAKD,IACTA,EAAMrB,SAASY,MAAK,SAAAa,GAAC,OAAIA,EAAErB,cAC5BsB,MAAM,4CAA8CL,EAAMhB,YAC1DiB,EAASpC,sBAAYC,EAAMC,MAI/BuC,EAAO,GACF1B,EAAI,EAAGA,EAAIoB,EAAMlC,KAAMc,IAAK,CACjC,IAAK,IAAIC,EAAI,EAAGA,EAAImB,EAAMjC,QAASc,IAC/ByB,EAAKxB,KAAK,kBAAC,EAAD,CAAQb,IAAKW,EAAGV,OAAQW,EAAGK,MAAOc,KAEhDM,EAAKxB,KAAK,8BAqBd,OAlBAyB,SAASC,UAAY,SAAUhB,GAC3B,OAAQA,EAAEiB,SACN,KAAK,GACDP,EAAY,GACZ,MACJ,KAAK,GACDA,EAAY,GACZ,MACJ,KAAK,GACDA,EAAY,GACZ,MACJ,KAAK,GACDA,EAAY,KAOpB,kBAAC,IAAMQ,SAAP,KACI,yBAAKjB,UAAU,kBACVa,EACD,4BAAQK,QAAS,kBAAMV,EAASpC,sBAAYC,EAAMC,MAAlD,WACA,2CAAiBiC,EAAMhB,gB,MChDxB4B,MAVf,WACE,IAAM7C,EAAU8C,OAAO,4BACjB/C,EAAO+C,OAAO,6BACpB,OACE,kBAAC,IAAMH,SAAP,KACE,kBAAC,EAAD,CAAO5C,KAAMA,EAAMC,QAASA,MCLlC+C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASU,eAAe,W","file":"static/js/main.c97bf3dc.chunk.js","sourcesContent":["const createBoard = (rows, columns) => {\r\n\r\n    const playerRow = Math.round(rows / 2);\r\n    const playerColumn = Math.round(columns / 2);\r\n    const playerLocation = { row: playerRow, column: playerColumn };\r\n\r\n    let occupiedLocations = new Map();\r\n    const playerSquare = playerLocation.row * columns + playerLocation.column;\r\n    const boardSquares = rows * columns;\r\n\r\n    // Generate unique random numbers between 0 and rows * columns\r\n    while (occupiedLocations.size < rows) {\r\n        const newValue = random(boardSquares);\r\n        if (!occupiedLocations.has(newValue) && newValue !== playerSquare) {\r\n            occupiedLocations.set(newValue);\r\n        }\r\n    }\r\n\r\n    const elements = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < columns; j++) {\r\n            if (occupiedLocations.has(i * columns + j)) {\r\n                elements.push({ row: i, column: j, hasEnemy: true });\r\n            } else {\r\n                elements.push({ row: i, column: j, hasEnemy: false });\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        elements,\r\n        rows,\r\n        columns,\r\n        playerLocation,\r\n        totalMoves: 0,\r\n\r\n    };\r\n};\r\n\r\nconst random = (maxNum) => {\r\n    return Math.round(Math.random() * maxNum);\r\n}\r\n\r\nmodule.exports = { createBoard };","module.exports = __webpack_public_path__ + \"static/media/enemy.a5f7690a.svg\";","module.exports = __webpack_public_path__ + \"static/media/player.cb76cac8.svg\";","import React from 'react';\r\nimport './Square.scss';\r\nimport enemy from './enemy.svg';\r\nimport player from './player.svg';\r\n\r\nconst Square = ({ row, column, board }) => {\r\n\r\n    console.log(board);\r\n    if (!board || board.elements.length === 0) return null;\r\n    const hasEnemy = board.elements.find(e => e.row === row && e.column === column).hasEnemy;\r\n    let state = 0; // 0: empty, 1 hasEnemy, 2 hasPlayer\r\n    if (hasEnemy) {\r\n        state = 1;\r\n    };\r\n\r\n    if (board.playerLocation.row === row && board.playerLocation.column === column) {\r\n        state = 2;\r\n    }\r\n\r\n    if (state === 0) {\r\n        return <div className=\"container\">\r\n\r\n        </div>\r\n    } else if (state === 1) {\r\n        return <div className=\"container\">\r\n            <div className=\"square\">\r\n                <img src={enemy} alt=\"enemy\"></img>\r\n            </div>\r\n        </div>\r\n    } else {\r\n        return <div className=\"container\">\r\n            <div className=\"square\">\r\n                <img src={player} alt=\"player\"></img>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default Square;","import React, { useState } from 'react';\r\nimport Square from './Square';\r\nimport { createBoard } from '../helpers/core';\r\nimport './Board.scss';\r\n\r\nconst Board = ({ rows, columns }) => {\r\n\r\n    const [model, setModel] = useState(createBoard(rows, columns));\r\n\r\n    const moveHandler = (direction) => {\r\n        if (direction === 1) {\r\n            if (model.playerLocation.row > 0) { model.playerLocation.row--; }\r\n        } else if (direction === 2) {\r\n            if (model.playerLocation.row < model.rows - 1) { model.playerLocation.row++; }\r\n        } else if (direction === 3) {\r\n            if (model.playerLocation.column > 0) { model.playerLocation.column--; }\r\n        } else if (direction === 4) {\r\n            if (model.playerLocation.column < model.columns - 1) { model.playerLocation.column++ }\r\n        }\r\n\r\n        const enemy = model.elements.find(a => a.row === model.playerLocation.row && a.column === model.playerLocation.column);\r\n        if (enemy) {\r\n            enemy.hasEnemy = false;\r\n        }\r\n        model.totalMoves++;\r\n        setModel({ ...model });\r\n        if (!model.elements.find(a => a.hasEnemy)) {\r\n            alert('Game over. Total moves to save princess: ' + model.totalMoves);\r\n            setModel(createBoard(rows, columns));\r\n        }\r\n    }\r\n\r\n    let divs = [];\r\n    for (let i = 0; i < model.rows; i++) {\r\n        for (let j = 0; j < model.columns; j++) {\r\n            divs.push(<Square row={i} column={j} board={model}></Square>);\r\n        }\r\n        divs.push(<br></br>);\r\n    }\r\n\r\n    document.onkeydown = function (e) {\r\n        switch (e.keyCode) {\r\n            case 37:\r\n                moveHandler(3);\r\n                break;\r\n            case 38:\r\n                moveHandler(1);\r\n                break;\r\n            case 39:\r\n                moveHandler(4);\r\n                break;\r\n            case 40:\r\n                moveHandler(2);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"boardContainer\">\r\n                {divs}\r\n                <button onClick={() => setModel(createBoard(rows, columns))}>Restart</button>\r\n                <p>Total Moves: {model.totalMoves}</p>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './components/Board';\r\n\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const columns = prompt('Please enter board width');\r\n  const rows = prompt('Please enter board height');\r\n  return (\r\n    <React.Fragment>\r\n      <Board rows={rows} columns={columns}></Board>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}